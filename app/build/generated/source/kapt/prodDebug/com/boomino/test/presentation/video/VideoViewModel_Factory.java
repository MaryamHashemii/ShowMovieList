// Generated by Dagger (https://dagger.dev).
package com.boomino.test.presentation.video;

import com.boomino.test.domain.usecase.CategoryUseCase;
import com.boomino.test.domain.usecase.GetAllVideosUseCase;
import com.boomino.test.domain.usecase.GetFilterVideosUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VideoViewModel_Factory implements Factory<VideoViewModel> {
  private final Provider<GetAllVideosUseCase> getAllVideosUseCaseProvider;

  private final Provider<GetFilterVideosUseCase> getFilterVideosUseCaseProvider;

  private final Provider<CategoryUseCase> categoryUseCaseProvider;

  public VideoViewModel_Factory(Provider<GetAllVideosUseCase> getAllVideosUseCaseProvider,
      Provider<GetFilterVideosUseCase> getFilterVideosUseCaseProvider,
      Provider<CategoryUseCase> categoryUseCaseProvider) {
    this.getAllVideosUseCaseProvider = getAllVideosUseCaseProvider;
    this.getFilterVideosUseCaseProvider = getFilterVideosUseCaseProvider;
    this.categoryUseCaseProvider = categoryUseCaseProvider;
  }

  @Override
  public VideoViewModel get() {
    return newInstance(getAllVideosUseCaseProvider.get(), getFilterVideosUseCaseProvider.get(), categoryUseCaseProvider.get());
  }

  public static VideoViewModel_Factory create(
      Provider<GetAllVideosUseCase> getAllVideosUseCaseProvider,
      Provider<GetFilterVideosUseCase> getFilterVideosUseCaseProvider,
      Provider<CategoryUseCase> categoryUseCaseProvider) {
    return new VideoViewModel_Factory(getAllVideosUseCaseProvider, getFilterVideosUseCaseProvider, categoryUseCaseProvider);
  }

  public static VideoViewModel newInstance(GetAllVideosUseCase getAllVideosUseCase,
      GetFilterVideosUseCase getFilterVideosUseCase, CategoryUseCase categoryUseCase) {
    return new VideoViewModel(getAllVideosUseCase, getFilterVideosUseCase, categoryUseCase);
  }
}
