// Generated by Dagger (https://dagger.dev).
package com.boomino.test.di;

import com.boomino.test.data.local.dao.AppDao;
import com.boomino.test.data.remote.ApiService;
import com.boomino.test.domain.repository.AppRepository;
import com.boomino.test.util.NetworkConnectivity;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideAppRepositoryFactory implements Factory<AppRepository> {
  private final Provider<ApiService> apiServiceProvider;

  private final Provider<AppDao> appDaoProvider;

  private final Provider<NetworkConnectivity> networkConnectivityProvider;

  public RepositoryModule_ProvideAppRepositoryFactory(Provider<ApiService> apiServiceProvider,
      Provider<AppDao> appDaoProvider, Provider<NetworkConnectivity> networkConnectivityProvider) {
    this.apiServiceProvider = apiServiceProvider;
    this.appDaoProvider = appDaoProvider;
    this.networkConnectivityProvider = networkConnectivityProvider;
  }

  @Override
  public AppRepository get() {
    return provideAppRepository(apiServiceProvider.get(), appDaoProvider.get(), networkConnectivityProvider.get());
  }

  public static RepositoryModule_ProvideAppRepositoryFactory create(
      Provider<ApiService> apiServiceProvider, Provider<AppDao> appDaoProvider,
      Provider<NetworkConnectivity> networkConnectivityProvider) {
    return new RepositoryModule_ProvideAppRepositoryFactory(apiServiceProvider, appDaoProvider, networkConnectivityProvider);
  }

  public static AppRepository provideAppRepository(ApiService apiService, AppDao appDao,
      NetworkConnectivity networkConnectivity) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideAppRepository(apiService, appDao, networkConnectivity));
  }
}
